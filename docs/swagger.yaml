basePath: /api/v1
definitions:
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  models.Level:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      name:
        type: string
      updatedAt:
        type: string
    type: object
  models.Section:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      id:
        type: integer
      level:
        $ref: '#/definitions/models.Level'
      levelID:
        type: integer
      section:
        $ref: '#/definitions/models.Section'
      sectionID:
        type: integer
      title:
        type: string
      updatedAt:
        type: string
      user:
        $ref: '#/definitions/models.User'
      userID:
        type: integer
    type: object
  models.Trick:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      id:
        type: integer
      instruction:
        type: string
      section:
        $ref: '#/definitions/models.Section'
      sectionID:
        type: integer
      updatedAt:
        type: string
      user:
        $ref: '#/definitions/models.User'
      userID:
        type: integer
    type: object
  models.User:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      id:
        type: integer
      password:
        type: string
      updatedAt:
        type: string
    type: object
  pkg.sectionLevel:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  v1.Error:
    properties:
      error:
        type: string
    type: object
  v1.Success:
    properties:
      status:
        type: string
    type: object
externalDocs:
  description: JestHub Documentation
  url: https://jesthub.sh/docs
host: localhost:8080
info:
  contact:
    email: petar.nikolovski@protonmail.com
    name: Petar Nikolovski
    url: https://jesthub.sh/support
  description: Store and reuse your CLI commands.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: https://jesthub.sh/terms/
  title: Jester API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: post data to get a JWT token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.Success'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.Error'
      summary: Login a user
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: post data for user registration
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.Success'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.Error'
      summary: Register a new user
      tags:
      - auth
  /sections:
    get:
      consumes:
      - application/json
      description: list top level sections
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Section'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.Error'
      summary: List top level sections
      tags:
      - sections
    post:
      consumes:
      - application/json
      description: create a new section or subsection
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Section'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.Error'
      summary: Create a section or subsection
      tags:
      - sections
  /sections/{sectionId}/children:
    get:
      consumes:
      - application/json
      description: get child sections
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Section'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.Error'
      summary: Get child sections
      tags:
      - sections
  /sections/{sectionId}/tricks:
    get:
      consumes:
      - application/json
      description: list tricks for a subsection
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Trick'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.Error'
      summary: List tricks for a subsection
      tags:
      - sections
    post:
      consumes:
      - application/json
      description: create a new trick and associate it with subsection
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Trick'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.Error'
      summary: Create a trick
      tags:
      - sections
  /sections/levels:
    get:
      consumes:
      - application/json
      description: get all levels
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/pkg.sectionLevel'
            type: array
      summary: List possible levels for sections
      tags:
      - sections
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
